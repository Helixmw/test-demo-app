@page "/Home/Fitting/Create"
@using GolfingAppUI.Models
@using GolfingAppUI.Helpers
@using GolfingDataAccessLib.Authentication
@using GolfingDataAccessLib.DTOs.Fitting
@using GolfingDataAccessLib.Exceptions
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.Forms
@using GolfingAppUI.Shared
@using System.Security.Claims
@using GolfingDataAccessLib.Logic
@inject IFittingProcessor fittingProcessor
@inject NavigationManager navigationManager
@inject CustomAuthenticationStateProvider auth
@inject IJSRuntime js
@attribute [Authorize]
@layout Shared.UserLayout
<div class="fitting">
<div class="title">Schedule A Fitting</div>
<div class="sm-title">Create a new fitting schedule</div>
<EditForm Model="@fittingSchedule" OnValidSubmit="AddNewFittingSchedule">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label class="label" for="avaliableDate">Available Date*</label>
        <InputDate id="avaliableDate" class="form-control input" @bind-Value="fittingSchedule.AvailableDate" />
    </div>

    <div class="form-group">
        <label class="label" for="availableTime">Available Time*</label>
      <input type="time" id="availableTime" class="form-control input" @bind-value="fittingSchedule.AvailableTime" />
    </div>
    <div class="form-group">
        <label class="label" for="comment">Comments</label>
        <InputTextArea id="comment" placeholder="Write a comment..." class="form-control text-area" @bind-Value="fittingSchedule.Comment" />
    </div>

    <button type="submit" class="form-button">Create Schedule</button>
</EditForm>
</div>
<style scoped>
  .fitting{margin:3rem;}
    .register{display: grid;
    margin:6rem 3rem;
    grid-template-columns: repeat(2,1fr)}
    .heading{
   }


    /*Form*/

    .title{
      color:var(--primary);
    }

    .sm-title{
        font-family: var(--h3);
        font-size: var(--sm);
        color:rgb(84, 84, 84);
        font-size:1rem;
        margin-bottom: 0.7rem;
    }

    .label{
  font-family:var(--h3);
  font-size:1rem;
  margin-bottom: 0.3rem;}

.form-control{
  width:20rem;
  border:1px solid black;
  border-radius:4px;
  font-family:var(--h3);
}

.form-group{display: flex;
  flex-direction: column; 
  font-family: var(--h3);
  font-size:1.2rem;
  padding:0.3rem 0.6rem;
  border-radius: 4px;
  margin-top: 0.5rem;
}

.form-button{
  background:var(--primary);
  color:white;
  font-size:1rem;
  font-family: var(--h3);
  padding:0.2rem 0.5rem;
  border:0px;
  margin-left:0.5rem;
  border-radius:4px;
}
    /*----*/
</style>
@code{

     private FittingSchedule fittingSchedule {get; set;} = new FittingSchedule();

      public string? userName {get;set;}
      public string? email {get;set;}
      public string? role {get;set;}

      private ClaimsPrincipal userClaims {get;set;} = new();
      protected override async Task OnInitializedAsync()
      {
          var state = await auth.GetAuthenticationStateAsync();
          if(state != null && state.User.Identity.IsAuthenticated)
          {
            userName = state.User.Claims.FirstOrDefault(c => c.Type == "UserName")?.Value;
            role = state.User.Claims.FirstOrDefault(c => c.Type == "Role")?.Value;
            email = state.User.Claims.FirstOrDefault(c => c.Type == "Email")?.Value;

           // checkRole(email);
          
          }
          
      }
      private async Task AddNewFittingSchedule(){
        var getFittingDTO = new GetFittingDTO(){
          Email = email,
          Role = role,
          AvailableDate = fittingSchedule.AvailableDate,
          AvailableTime = fittingSchedule.AvailableTime,
          Comment = fittingSchedule.Comment
        };
       try{
        await fittingProcessor.CreateFittingScheduleAsync(getFittingDTO);
        navigationManager.NavigateTo("/Home/Fitting/All");
        }catch(ScheduleOperationException ex){
          await js.InvokeVoidAsync("alert", ex.Message);
        }
      }

       private void checkRole(string role){
        if(role != "Customer"){
            navigationManager.NavigateTo("/Home/Dashboard");
        }
    }

    

}