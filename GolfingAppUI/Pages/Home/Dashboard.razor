@page "/Home/Dashboard"
@using GolfingDataAccessLib.Authentication
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using GolfingAppUI.Shared
@using System.Security.Claims
@using GolfingAppUI.Helpers
@inject CustomAuthenticationStateProvider auth
@rendermode RenderMode.InteractiveServer   
@attribute [Authorize] 
@layout Shared.UserLayout

<div class="welcome">
    <AuthorizeView>
        <Authorized>      
        <div class="dash-heading">Welcome @userName!</div>
        </Authorized>
         <NotAuthorized>      
        <div class="dash-heading">Welcome Guest</div>
        </NotAuthorized>    
    </AuthorizeView>
    <AuthorizeView>
        <Authorized>
            <div class="tag">@role</div>
        </Authorized>
        <NotAuthorized>
            <div class="tag">Guest User</div>
        </NotAuthorized>
    </AuthorizeView>
    <div class="widgets">
        <div class="widget top"></div>
        <div class="widget left"></div>
        <div class="widget right"></div>
        <div class="widget bottom-left"></div>
        <div class="widget center"></div>
        <div class="widget bottom-right"></div>
    </div>
</div>
<style scoped>
    .welcome{margin:3rem;}
    .dash-heading{font-family: var(--h2);
     font-size:var(--lg);}
    .tag{font-family: var(--h3);
    font-size:var(--sm);
    color:var(--primary);
    }

    .top{
        grid-column: 1/5;
    }

    .left{
        grid-column:1/3;
    }

    .right{
        grid-column:3/5;
    }

    .bottom-left{
        grid-column:1/2;
    }

    .center{
        grid-column:2/4;
    }

    .bottom-right{
        grid-column:4/5;
    }
    

    .widget{
        background-color: rgb(171, 228, 247);
        padding:1rem;
        border-radius:4px;
        min-height:8rem;
       
    }
    

    .widgets{
        margin-top:2rem;
        display:grid;
        grid-template-columns: repeat(4,1fr);
        column-gap:0.5rem;
        row-gap: 0.5rem;
        }
</style>
@code{

    public string userName { get; set; } = "";
    public string role { get; set; } = "s";

    protected override async Task OnInitializedAsync()
    {
        var state = await auth.GetAuthenticationStateAsync();
        if(state != null && state.User.Identity.IsAuthenticated)
        {
           userName = state.User.Claims.FirstOrDefault(c => c.Type == "UserName")?.Value;
           role = state.User.Claims.FirstOrDefault(c => c.Type == "Role")?.Value;
         
        }
        
    }
}